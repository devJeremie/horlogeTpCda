// Fonction de mise √† jour de l'horloge
// Appelle la fonction setClock toutes les 1000 millisecondes (soit 1 seconde)
// setInterval(setClock, 1000);

// // Fonction qui met √† jour l'heure de l'horloge analogique
// function setClock() {
//     // Valeur en degr√©s d'une unit√© de temps sur une horloge (360¬∞ / 60 = 6¬∞)
//     const deg = 6;
//     // Cr√©ation de la date actuelle
//     const now = new Date();
//     // R√©cup√©ration des heures, minutes et secondes de l'heure actuelle
//     const hr = now.getHours();    // Heure actuelle
//     const mn = now.getMinutes();  // Minutes actuelles
//     const sc = now.getSeconds();  // Secondes actuelles
//     // Calcul et application de la rotation de l'aiguille des heures :
//     // Chaque heure vaut 30¬∞ (360¬∞ / 12), et on ajoute l'influence des minutes (0.5¬∞ par minute)
//     document.getElementById('hr').style.transform = `rotate(${(hr % 12) * 30 + mn / 2}deg)`;
//     // Calcul de la rotation de l'aiguille des minutes (6¬∞ par minute)
//     document.getElementById('mn').style.transform = `rotate(${mn * deg}deg)`;
//     // Calcul de la rotation de l'aiguille des secondes (6¬∞ par seconde)
//     document.getElementById('sc').style.transform = `rotate(${sc * deg}deg)`;
//     // Appel d'une fonction pour v√©rifier si une alarme doit √™tre d√©clench√©e
//     checkAlarm(hr, mn);
// }

//     // --- ALARME ---
//     let alarmHour = null;
//     let alarmMinute = null;
//     let alarmMessage = "";
//     let alarmArmed = false;

//     function setAlarm() {
//     const alarmInput = document.getElementById('alarmTime').value;
//     const messageInput = document.getElementById('alarmMessage').value;

//     // V√©rification de la pr√©sence d'une heure
//     if (!alarmInput) {
//         alert("Veuillez s√©lectionner une heure d'alarme.");
//     return;
//     }

//     const [hour, minute] = alarmInput.split(":").map(Number);

//     alarmHour = hour;
//     alarmMinute = minute;
//     alarmMessage = messageInput || "C'est l'heure de l'alarme !";
//     alarmArmed = true;
//     alert(`‚è∞ Alarme r√©gl√©e √† ${alarmHour}:${alarmMinute.toString().padStart(2, '0')}`);
// }

//     let alarmAlreadyTriggered = false;

//     function checkAlarm(currentHour, currentMinute) {
//         const currentSecond = new Date().getSeconds(); // Ajoute les secondes
//     if (
//     alarmArmed &&
//     alarmHour !== null &&
//     alarmMinute !== null &&
//     currentHour === alarmHour &&
//     currentMinute === alarmMinute &&
//     currentSecond === 0 && // Ne d√©clenche que √† la toute premi√®re 
//     !alarmAlreadyTriggered
//     ) {
//         alarmAlreadyTriggered = true;
//     playAlarm();
//     alert("üîî Alarme : " + alarmMessage);
//     }

//     // R√©armer pour pouvoir d√©clencher √† nouveau si l'alarme est r√©initialis√©e
//     if (
//     alarmAlreadyTriggered &&
//     (currentHour !== alarmHour || currentMinute !== alarmMinute)
//     ) {
//         alarmAlreadyTriggered = false;
//     }
// }

//     // --- JOUER LE SON ---
//     function playAlarm() {
//     const sound = document.getElementById('alarmSound');
//     if (sound) {
//         sound.currentTime = 0;
//     sound.play();
//     }
// }
/*--- HORLOGE DIGITALE ---*/
// Horloge digitale
// Fonction qui met √† jour l'affichage de l'horloge
// R√©cup√®re l'√©l√©ment de l'horloge et du son de l'alarme depuis le HTML
const clock = document.getElementById("digital-clock");
const alarmSound = document.getElementById("alarmSound");
// Variables pour stocker l'heure de l'alarme, le message texte, et un indicateur si elle a d√©j√† sonn√©
let alarmTime = "";
let alarmMsg = "";
let alarmTriggered = false;
// Fonction pour mettre √† jour l'heure affich√©e et d√©clencher l'alarme si n√©cessaire
function updateClock() {
    const now = new Date(); // R√©cup√®re la date et l'heure actuelle
    // Formate les heures, minutes et secondes avec un z√©ro devant si n√©cessaire (ex. 09 au lieu de 9)
    const h = String(now.getHours()).padStart(2, "0");
    const m = String(now.getMinutes()).padStart(2, "0");
    const s = String(now.getSeconds()).padStart(2, "0");
    // Affiche l'heure actuelle dans l'√©l√©ment HTML
    clock.textContent = `${h}:${m}:${s}`;
    // V√©rifie si l'heure actuelle correspond √† celle de l'alarme ET si c'est le d√©but d'une minute (secondes === "00")
    if (`${h}:${m}` === alarmTime && s === "00" && !alarmTriggered) {
        alarmTriggered = true; // Marque que l'alarme a √©t√© d√©clench√©e (√©vite qu'elle sonne plusieurs fois dans la m√™me minute)
        alarmSound.play(); // Joue le son de l'alarme
        alert("üîî Alarme : " + (alarmMsg || "C'est l'heure !")); // Affiche le message d'alarme personnalis√© ou un message par d√©faut
    }
    // Si on est sorti de l'heure de l'alarme, on r√©arme l'alarme pour pouvoir sonner √† nouveau la prochaine fois
    if (`${h}:${m}` !== alarmTime) {
        alarmTriggered = false;
    }
}
// Fonction appel√©e lorsqu'on clique sur "R√©gler l'alarme"
function setAlarm() {
    const t = document.getElementById("alarmTime").value; // R√©cup√®re l'heure choisie dans le champ input de type "time"
    alarmMsg = document.getElementById("alarmMessage").value; // R√©cup√®re le message tap√© dans le champ de texte

    if (!t) return alert("‚è∞ Choisissez une heure !"); // Avertit si aucune heure n'a √©t√© s√©lectionn√©e

    alarmTime = t; // Enregistre l'heure de l'alarme
    alarmTriggered = false; // R√©initialise l'√©tat de d√©clenchement
    alert(`‚úÖ Alarme r√©gl√©e √† ${t}`); // Confirmation √† l'utilisateur
}
// Fonction pour arr√™ter le son de l'alarme manuellement
function stopAlarm() {
    alarmSound.pause(); // Met en pause le son
    alarmSound.currentTime = 0; // Remet le son au d√©but pour un prochain d√©clenchement
    alert("üîï Alarme stopp√©e."); // Message de confirmation
}
// Actualise l'horloge toutes les secondes (1000 millisecondes)
setInterval(updateClock, 1000);

// Appelle imm√©diatement updateClock au chargement de la page pour afficher l'heure sans attendre 1 seconde
updateClock();

